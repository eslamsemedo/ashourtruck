import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Star, ShoppingCart, Heart, Truck, Shield, Zap } from 'lucide-react';

interface AccessoryProps {
  id: string;
  name: string;
  description: string;
  price: number;
  originalPrice?: number;
  rating: number;
  reviews: number;
  image: string;
  category: string;
  inStock: boolean;
  features: string[];
}

interface CarAccessoryStoreProps {
  accessories?: AccessoryProps[];
}

const CarAccessoryStore: React.FC<CarAccessoryStoreProps> = ({
  accessories = [
    {
      id: '1',
      name: 'Premium Car Phone Mount',
      description: 'Universal magnetic phone holder with 360° rotation and strong grip for all smartphone sizes.',
      price: 29.99,
      originalPrice: 39.99,
      rating: 4.8,
      reviews: 1247,
      image: 'https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=400&h=300&fit=crop',
      category: 'Electronics',
      inStock: true,
      features: ['360° Rotation', 'Magnetic Mount', 'Universal Fit']
    },
    {
      id: '2',
      name: 'LED Dashboard Camera',
      description: 'Full HD 1080p dash cam with night vision, loop recording, and G-sensor for accident detection.',
      price: 89.99,
      originalPrice: 119.99,
      rating: 4.6,
      reviews: 892,
      image: 'https://images.unsplash.com/photo-1449824913935-59a10b8d2000?w=400&h=300&fit=crop',
      category: 'Electronics',
      inStock: true,
      features: ['1080p HD', 'Night Vision', 'G-Sensor']
    },
    {
      id: '3',
      name: 'Wireless Car Charger',
      description: 'Fast wireless charging pad with auto-clamping mount and Qi-certified safety features.',
      price: 49.99,
      rating: 4.7,
      reviews: 634,
      image: 'https://images.unsplash.com/photo-1586953208448-b95a79798f07?w=400&h=300&fit=crop',
      category: 'Electronics',
      inStock: true,
      features: ['Fast Charging', 'Auto-Clamp', 'Qi Certified']
    },
    {
      id: '4',
      name: 'All-Weather Floor Mats',
      description: 'Heavy-duty rubber floor mats with deep grooves for maximum protection against dirt and water.',
      price: 79.99,
      originalPrice: 99.99,
      rating: 4.9,
      reviews: 2156,
      image: 'https://images.unsplash.com/photo-1503376780353-7e6692767b70?w=400&h=300&fit=crop',
      category: 'Interior',
      inStock: true,
      features: ['All-Weather', 'Custom Fit', 'Easy Clean']
    },
    {
      id: '5',
      name: 'Car Air Purifier',
      description: 'HEPA filter air purifier with ionizer technology to eliminate odors and allergens.',
      price: 59.99,
      rating: 4.5,
      reviews: 445,
      image: 'https://images.unsplash.com/photo-1449965408869-eaa3f722e40d?w=400&h=300&fit=crop',
      category: 'Interior',
      inStock: false,
      features: ['HEPA Filter', 'Ionizer', 'USB Powered']
    },
    {
      id: '6',
      name: 'Tire Pressure Monitor',
      description: 'Real-time tire pressure monitoring system with wireless sensors and LCD display.',
      price: 129.99,
      rating: 4.4,
      reviews: 328,
      image: 'https://images.unsplash.com/photo-1486496572940-2bb2341fdbdf?w=400&h=300&fit=crop',
      category: 'Safety',
      inStock: true,
      features: ['Real-time Monitor', 'Wireless', 'LCD Display']
    }
  ]
}) => {
  const [favorites, setFavorites] = React.useState<Set<string>>(new Set());

  const toggleFavorite = (id: string) => {
    setFavorites(prev => {
      const newFavorites = new Set(prev);
      if (newFavorites.has(id)) {
        newFavorites.delete(id);
      } else {
        newFavorites.add(id);
      }
      return newFavorites;
    });
  };

  const renderStars = (rating: number) => {
    return Array.from({ length: 5 }, (_, i) => (
      <Star
        key={i}
        className={`w-4 h-4 ${
          i < Math.floor(rating) 
            ? 'fill-yellow-400 text-yellow-400' 
            : 'text-gray-300'
        }`}
      />
    ));
  };

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case 'Electronics':
        return <Zap className="w-4 h-4" />;
      case 'Safety':
        return <Shield className="w-4 h-4" />;
      default:
        return <Truck className="w-4 h-4" />;
    }
  };

  return (
    <div className="min-h-screen bg-background p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="text-center mb-12">
          <h1 className="text-4xl font-bold text-foreground mb-4">
            Premium Car Accessories
          </h1>
          <p className="text-xl text-muted-foreground max-w-2xl mx-auto">
            Enhance your driving experience with our curated collection of high-quality car accessories
          </p>
        </div>

        {/* Category Filter */}
        <div className="flex flex-wrap gap-3 justify-center mb-8">
          {['All', 'Electronics', 'Interior', 'Safety'].map((category) => (
            <Badge
              key={category}
              variant={category === 'All' ? 'default' : 'secondary'}
              className="px-4 py-2 cursor-pointer hover:bg-primary/80 transition-colors"
            >
              {category}
            </Badge>
          ))}
        </div>

        {/* Products Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {accessories.map((accessory) => (
            <Card key={accessory.id} className="group hover:shadow-lg transition-all duration-300 border-border">
              <div className="relative overflow-hidden">
                <img
                  src={accessory.image}
                  alt={accessory.name}
                  className="w-full h-48 object-cover group-hover:scale-105 transition-transform duration-300"
                />
                <Button
                  variant="ghost"
                  size="sm"
                  className="absolute top-2 right-2 bg-background/80 hover:bg-background"
                  onClick={() => toggleFavorite(accessory.id)}
                >
                  <Heart
                    className={`w-4 h-4 ${
                      favorites.has(accessory.id)
                        ? 'fill-red-500 text-red-500'
                        : 'text-muted-foreground'
                    }`}
                  />
                </Button>
                {accessory.originalPrice && (
                  <Badge className="absolute top-2 left-2 bg-red-500 hover:bg-red-600">
                    Sale
                  </Badge>
                )}
                {!accessory.inStock && (
                  <div className="absolute inset-0 bg-black/50 flex items-center justify-center">
                    <Badge variant="destructive">Out of Stock</Badge>
                  </div>
                )}
              </div>

              <CardHeader className="pb-3">
                <div className="flex items-center justify-between mb-2">
                  <Badge variant="outline" className="flex items-center gap-1">
                    {getCategoryIcon(accessory.category)}
                    {accessory.category}
                  </Badge>
                  <div className="flex items-center gap-1">
                    {renderStars(accessory.rating)}
                    <span className="text-sm text-muted-foreground ml-1">
                      ({accessory.reviews})
                    </span>
                  </div>
                </div>
                <CardTitle className="text-lg leading-tight">
                  {accessory.name}
                </CardTitle>
                <CardDescription className="text-sm">
                  {accessory.description}
                </CardDescription>
              </CardHeader>

              <CardContent className="pt-0">
                <div className="flex flex-wrap gap-1 mb-4">
                  {accessory.features.map((feature, index) => (
                    <Badge key={index} variant="secondary" className="text-xs">
                      {feature}
                    </Badge>
                  ))}
                </div>

                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-2">
                    <span className="text-2xl font-bold text-foreground">
                      ${accessory.price}
                    </span>
                    {accessory.originalPrice && (
                      <span className="text-sm text-muted-foreground line-through">
                        ${accessory.originalPrice}
                      </span>
                    )}
                  </div>
                  <Button
                    className="flex items-center gap-2"
                    disabled={!accessory.inStock}
                  >
                    <ShoppingCart className="w-4 h-4" />
                    Add to Cart
                  </Button>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>

        {/* Features Section */}
        <div className="mt-16 grid grid-cols-1 md:grid-cols-3 gap-6">
          <Card className="text-center p-6">
            <Truck className="w-12 h-12 mx-auto mb-4 text-primary" />
            <h3 className="text-lg font-semibold mb-2">Free Shipping</h3>
            <p className="text-muted-foreground">Free delivery on orders over $50</p>
          </Card>
          <Card className="text-center p-6">
            <Shield className="w-12 h-12 mx-auto mb-4 text-primary" />
            <h3 className="text-lg font-semibold mb-2">Quality Guarantee</h3>
            <p className="text-muted-foreground">30-day money back guarantee</p>
          </Card>
          <Card className="text-center p-6">
            <Zap className="w-12 h-12 mx-auto mb-4 text-primary" />
            <h3 className="text-lg font-semibold mb-2">Fast Installation</h3>
            <p className="text-muted-foreground">Easy DIY installation guides</p>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default CarAccessoryStore;



================================================

"use client";

import React, { useState } from "react";
import { Star, ShoppingCart, Heart, Share2, Zap, Shield, Truck, RotateCcw } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Card } from "@/components/ui/card";

interface CarAccessoryProps {
  name?: string;
  price?: number;
  originalPrice?: number;
  rating?: number;
  reviewCount?: number;
  images?: string[];
  features?: string[];
  description?: string;
  inStock?: boolean;
  fastShipping?: boolean;
  warranty?: string;
  category?: string;
}

const CarAccessory: React.FC<CarAccessoryProps> = ({
  name = "Premium Car Dashboard Camera",
  price = 299.99,
  originalPrice = 399.99,
  rating = 4.8,
  reviewCount = 1247,
  images = [
    "https://images.unsplash.com/photo-1549317661-bd32c8ce0db2?w=500&h=500&fit=crop",
    "https://images.unsplash.com/photo-1558618666-fcd25c85cd64?w=500&h=500&fit=crop",
    "https://images.unsplash.com/photo-1544829099-b9a0c5303bea?w=500&h=500&fit=crop",
    "https://images.unsplash.com/photo-1502877338535-766e1452684a?w=500&h=500&fit=crop"
  ],
  features = [
    "4K Ultra HD Recording",
    "Night Vision Technology",
    "GPS Tracking",
    "Loop Recording",
    "G-Sensor Protection",
    "Wide Angle Lens"
  ],
  description = "Professional-grade dashboard camera with advanced features for complete road safety. Captures crystal-clear footage in all lighting conditions with built-in GPS and emergency recording capabilities.",
  inStock = true,
  fastShipping = true,
  warranty = "2 Year Warranty",
  category = "Safety & Security"
}) => {
  const [selectedImage, setSelectedImage] = useState(0);
  const [quantity, setQuantity] = useState(1);
  const [isWishlisted, setIsWishlisted] = useState(false);

  const discount = Math.round(((originalPrice - price) / originalPrice) * 100);

  const renderStars = (rating: number) => {
    return Array.from({ length: 5 }, (_, i) => (
      <Star
        key={i}
        className={`w-4 h-4 ${
          i < Math.floor(rating)
            ? "fill-yellow-400 text-yellow-400"
            : i < rating
            ? "fill-yellow-400/50 text-yellow-400"
            : "text-muted-foreground"
        }`}
      />
    ));
  };

  return (
    <div className="max-w-7xl mx-auto p-6 bg-background">
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* Image Gallery */}
        <div className="space-y-4">
          <div className="relative aspect-square rounded-lg overflow-hidden bg-muted">
            <img
              src={images[selectedImage]}
              alt={name}
              className="w-full h-full object-cover transition-transform duration-300 hover:scale-105"
            />
            {discount > 0 && (
              <Badge className="absolute top-4 left-4 bg-destructive text-destructive-foreground">
                -{discount}% OFF
              </Badge>
            )}
            {fastShipping && (
              <Badge className="absolute top-4 right-4 bg-green-600 text-white">
                <Zap className="w-3 h-3 mr-1" />
                Fast Shipping
              </Badge>
            )}
          </div>
          
          {/* Thumbnail Gallery */}
          <div className="grid grid-cols-4 gap-2">
            {images.map((image, index) => (
              <button
                key={index}
                onClick={() => setSelectedImage(index)}
                className={`aspect-square rounded-md overflow-hidden border-2 transition-colors ${
                  selectedImage === index
                    ? "border-primary"
                    : "border-border hover:border-muted-foreground"
                }`}
              >
                <img
                  src={image}
                  alt={`${name} view ${index + 1}`}
                  className="w-full h-full object-cover"
                />
              </button>
            ))}
          </div>
        </div>

        {/* Product Details */}
        <div className="space-y-6">
          <div>
            <Badge variant="secondary" className="mb-2">
              {category}
            </Badge>
            <h1 className="text-3xl font-bold text-foreground mb-2">{name}</h1>
            
            {/* Rating */}
            <div className="flex items-center gap-2 mb-4">
              <div className="flex items-center">
                {renderStars(rating)}
              </div>
              <span className="text-sm text-muted-foreground">
                {rating} ({reviewCount.toLocaleString()} reviews)
              </span>
            </div>

            {/* Price */}
            <div className="flex items-center gap-3 mb-4">
              <span className="text-3xl font-bold text-foreground">
                ${price.toFixed(2)}
              </span>
              {originalPrice > price && (
                <span className="text-lg text-muted-foreground line-through">
                  ${originalPrice.toFixed(2)}
                </span>
              )}
            </div>

            {/* Stock Status */}
            <div className="flex items-center gap-2 mb-6">
              <div className={`w-2 h-2 rounded-full ${inStock ? "bg-green-500" : "bg-red-500"}`} />
              <span className={`text-sm font-medium ${inStock ? "text-green-600" : "text-red-600"}`}>
                {inStock ? "In Stock" : "Out of Stock"}
              </span>
            </div>
          </div>

          {/* Features */}
          <Card className="p-4">
            <h3 className="font-semibold mb-3">Key Features</h3>
            <div className="grid grid-cols-2 gap-2">
              {features.map((feature, index) => (
                <div key={index} className="flex items-center gap-2 text-sm">
                  <div className="w-1.5 h-1.5 rounded-full bg-primary" />
                  {feature}
                </div>
              ))}
            </div>
          </Card>

          {/* Description */}
          <div>
            <h3 className="font-semibold mb-2">Description</h3>
            <p className="text-muted-foreground text-sm leading-relaxed">
              {description}
            </p>
          </div>

          {/* Quantity and Actions */}
          <div className="space-y-4">
            <div className="flex items-center gap-4">
              <label className="text-sm font-medium">Quantity:</label>
              <div className="flex items-center border rounded-md">
                <button
                  onClick={() => setQuantity(Math.max(1, quantity - 1))}
                  className="px-3 py-2 hover:bg-muted transition-colors"
                  disabled={quantity <= 1}
                >
                  -
                </button>
                <span className="px-4 py-2 border-x">{quantity}</span>
                <button
                  onClick={() => setQuantity(quantity + 1)}
                  className="px-3 py-2 hover:bg-muted transition-colors"
                >
                  +
                </button>
              </div>
            </div>

            <div className="flex gap-3">
              <Button 
                className="flex-1" 
                size="lg"
                disabled={!inStock}
              >
                <ShoppingCart className="w-4 h-4 mr-2" />
                Add to Cart
              </Button>
              <Button
                variant="outline"
                size="lg"
                onClick={() => setIsWishlisted(!isWishlisted)}
                className={isWishlisted ? "text-red-500 border-red-500" : ""}
              >
                <Heart className={`w-4 h-4 ${isWishlisted ? "fill-current" : ""}`} />
              </Button>
              <Button variant="outline" size="lg">
                <Share2 className="w-4 h-4" />
              </Button>
            </div>
          </div>

          {/* Trust Badges */}
          <div className="grid grid-cols-3 gap-4 pt-6 border-t">
            <div className="flex flex-col items-center text-center">
              <Shield className="w-6 h-6 text-primary mb-2" />
              <span className="text-xs text-muted-foreground">{warranty}</span>
            </div>
            <div className="flex flex-col items-center text-center">
              <Truck className="w-6 h-6 text-primary mb-2" />
              <span className="text-xs text-muted-foreground">Free Shipping</span>
            </div>
            <div className="flex flex-col items-center text-center">
              <RotateCcw className="w-6 h-6 text-primary mb-2" />
              <span className="text-xs text-muted-foreground">30-Day Returns</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CarAccessory;




"use client";

import React from "react";
import { motion, AnimatePresence } from "framer-motion";
import { Filter, Search, ArrowUpDown, SlidersHorizontal, X, Check, ArrowLeft } from "lucide-react";

/**
 * SHOP PAGE — products grid + banner + filters + search
 * - Banner with grid background (like Hero) + back button
 * - Animated category chips (multi-select)
 * - Slide-over filter panel with categories + price range
 * - Loading skeletons
 * - Black/white/red theme
 */

// ===== Types from your API =====
type QuantityTier = { from: string; to?: string; equal?: string; total?: string };
type RawProductLang = {
  id: number;
  admin_id: number;
  category: string;
  name: string;
  image: string;
  price_each: string;
  description: string;
  weight: string;
  created_at: string;
  updated_at: string;
  quantity: QuantityTier[];
};
type RawProduct = { en: RawProductLang; ar: RawProductLang };
type ApiResponse = { status: string; message: Record<string, string>; data: RawProduct[] };

// ===== Normalized product used by UI =====
export type Product = {
  id: number;
  category: string;
  name: string;
  image: string;
  priceEach: number;
  createdAt: number;
  description: string;
  weight: number;
};

function parseMoney(s: string | undefined) {
  if (!s) return 0;
  const n = Number.parseFloat(s);
  return Number.isFinite(n) ? n : 0;
}

function normalize(raw: RawProduct[], lang: "en" | "ar" = "en"): Product[] {
  return raw.map((r) => {
    const p = r[lang];
    return {
      id: p.id,
      category: (p.category ?? "").trim(),
      name: p.name,
      image: p.image,
      priceEach: parseMoney(p.price_each),
      description: p.description,
      weight: parseMoney(p.weight),
      createdAt: new Date(p.created_at).getTime(),
    };
  });
}

export default function ShopPage({ apiUrl = "https://mediumaquamarine-loris-592285.hostingersite.com/api/v1/products", lang = "en" as "en" | "ar" }: { apiUrl?: string; lang?: "en" | "ar" }) {
  const [loading, setLoading] = React.useState(true);
  const [error, setError] = React.useState<string | null>(null);
  const [all, setAll] = React.useState<Product[]>([]);

  const [search, setSearch] = React.useState("");
  const [activeCats, setActiveCats] = React.useState<string[]>([]);
  const [sort, setSort] = React.useState<string>("newest");

  const [panelOpen, setPanelOpen] = React.useState(false);
  const [priceMin, setPriceMin] = React.useState<number | "">("");
  const [priceMax, setPriceMax] = React.useState<number | "">("");

  React.useEffect(() => {
    const ctrl = new AbortController();
    (async () => {
      try {
        setLoading(true);
        const res = await fetch(apiUrl, { signal: ctrl.signal, cache: "no-store" });
        if (!res.ok) throw new Error(`HTTP ${res.status}`);
        const json = (await res.json()) as ApiResponse;
        const products = normalize(json.data, lang);
        setAll(products);
        setError(null);
      } catch (e: any) {
        if (e.name !== "AbortError") setError(e?.message || "Failed to load products");
      } finally {
        setLoading(false);
      }
    })();
    return () => ctrl.abort();
  }, [apiUrl, lang]);

  const categories = React.useMemo(() => {
    const map = new Map<string, string>();
    all.forEach((p) => {
      const key = p.category.trim().toLowerCase();
      if (key && !map.has(key)) map.set(key, p.category.trim());
    });
    return Array.from(map, ([key, label]) => ({ key, label }));
  }, [all]);

  const filtered = React.useMemo(() => {
    let arr = all.slice();
    if (activeCats.length) {
      const set = new Set(activeCats);
      arr = arr.filter((p) => set.has(p.category.trim().toLowerCase()));
    }
    if (search.trim()) {
      const q = search.toLowerCase();
      arr = arr.filter((p) => p.name.toLowerCase().includes(q) || p.description.toLowerCase().includes(q));
    }
    if (priceMin !== "") arr = arr.filter((p) => p.priceEach >= Number(priceMin));
    if (priceMax !== "") arr = arr.filter((p) => p.priceEach <= Number(priceMax));
    switch (sort) {
      case "price-asc":
        arr.sort((a, b) => a.priceEach - b.priceEach);
        break;
      case "price-desc":
        arr.sort((a, b) => b.priceEach - a.priceEach);
        break;
      case "name":
        arr.sort((a, b) => a.name.localeCompare(b.name));
        break;
      default:
        arr.sort((a, b) => b.createdAt - a.createdAt);
    }
    return arr;
  }, [all, activeCats, search, sort, priceMin, priceMax]);

  const stats = React.useMemo(() => ({
    total: filtered.length,
    cats: new Set(filtered.map((p) => p.category.trim().toLowerCase())).size,
  }), [filtered]);

  function toggleCatByKey(key: string) {
    setActiveCats((prev) => (prev.includes(key) ? prev.filter((x) => x !== key) : [...prev, key]));
  }

  return (
    <section>
      {/* Animated Banner (hero-style) */}
      <div className="relative isolate overflow-hidden bg-[#360606]">
        {/* animated grid */}
        <motion.div
          aria-hidden
          className="absolute inset-0 -z-10"
          initial={{ scale: 1, opacity: 0.7 }}
          animate={{ scale: [1, 1.02, 1], opacity: [0.7, 0.9, 0.7] }}
          transition={{ duration: 16, repeat: Infinity }}
          style={{
            backgroundImage:
              "linear-gradient(to right, rgba(255,255,255,0.06) 1px, transparent 1px), linear-gradient(to bottom, rgba(255,255,255,0.06) 1px, transparent 1px)",
            backgroundSize: "48px 48px",
          }}
        />
        {/* red beams */}
        <motion.div
          aria-hidden
          className="pointer-events-none absolute inset-0 -z-10"
          initial={{ opacity: 0.25 }}
          animate={{ opacity: [0.25, 0.4, 0.25] }}
          transition={{ duration: 6, repeat: Infinity }}
        >
          <div className="absolute -left-20 top-0 h-[140%] w-40 rotate-12 bg-red-600/15 blur-2xl" />
          <div className="absolute left-1/2 top-10 h-[120%] w-32 -translate-x-1/2 -rotate-12 bg-red-600/20 blur-2xl" />
          <div className="absolute -right-24 bottom-0 h-[140%] w-40 -rotate-6 bg-red-600/15 blur-2xl" />
        </motion.div>
        {/* speed lines */}
        <motion.div
          aria-hidden
          className="absolute inset-0 -z-10 opacity-30"
          initial={{ backgroundPosition: "0px 0px" }}
          animate={{ backgroundPosition: ["0px 0px", "200px 0px"] }}
          transition={{ duration: 4, repeat: Infinity, ease: "linear" }}
          style={{
            backgroundImage:
              "repeating-linear-gradient(90deg, rgba(255,255,255,0.08) 0px, rgba(255,255,255,0.08) 2px, transparent 2px, transparent 12px)",
          }}
        />

        <div className="mx-auto max-w-7xl px-6 py-16 sm:py-24 lg:px-8">
          <div className="flex items-center justify-between">
            <motion.a
              href="/"
              initial={{ y: 10, opacity: 0 }}
              whileInView={{ y: 0, opacity: 1 }}
              viewport={{ once: true, amount: 0.6 }}
              className="group relative inline-flex items-center gap-2 rounded-xl border border-white/15 bg-white/5 px-4 py-2 text-sm font-semibold text-white backdrop-blur transition hover:border-white/25 hover:bg-white/10"
            >
              <svg viewBox="0 0 24 24" className="h-4 w-4" fill="none" stroke="currentColor" strokeWidth="2"><path d="M15 18l-6-6 6-6" /></svg>
              Back Home
              <motion.span
                initial={{ left: "-120%" }}
                whileHover={{ left: "120%" }}
                transition={{ duration: 0.9, ease: "easeInOut" }}
                className="pointer-events-none absolute inset-y-0 left-0 w-[40%] skew-x-12 bg-white/20 mix-blend-overlay"
              />
            </motion.a>
          </div>

          <motion.h1
            initial={{ y: 20, opacity: 0 }}
            whileInView={{ y: 0, opacity: 1 }}
            viewport={{ once: true, amount: 0.6 }}
            transition={{ duration: 0.7, ease: [0.22, 1, 0.36, 1] }}
            className="mt-8 text-4xl text-white font-extrabold tracking-tight sm:text-5xl"
          >
            Shop
          </motion.h1>
          <motion.p
            initial={{ y: 20, opacity: 0 }}
            whileInView={{ y: 0, opacity: 1 }}
            viewport={{ once: true, amount: 0.6 }}
            transition={{ duration: 0.7, delay: 0.05, ease: [0.22, 1, 0.36, 1] }}
            className="mt-3 max-w-2xl text-white/70"
          >
            Browse all products, filter by category, or search for exactly what you need.
          </motion.p>

          {/* sweeping shine across the banner */}
          <motion.span
            aria-hidden
            className="pointer-events-none absolute left-[-30%] top-0 h-full w-[35%] -skew-x-12 bg-white/5"
            initial={{ x: "-30%", opacity: 0 }}
            animate={{ x: ["-30%", "130%"], opacity: [0, 1, 0] }}
            transition={{ duration: 2.6, repeat: Infinity, repeatDelay: 4 }}
          />
        </div>
      </div>

      <div className="mx-auto max-w-7xl px-6 py-16 lg:px-8">
        {/* Stats */}
        <div className="mb-10 flex flex-col gap-4 sm:flex-row sm:items-end sm:justify-between">
          <div className="flex items-center gap-2 text-xs text-white/60">
            <span className="rounded-lg border border-white/10 bg-white/5 px-2 py-1">{stats.total} items</span>
            <span className="rounded-lg border border-white/10 bg-white/5 px-2 py-1">{stats.cats} categories</span>
          </div>
        </div>

        {/* Search, Sort, Filters trigger */}
        <div className="mb-6 grid grid-cols-1 gap-3 sm:grid-cols-12">
          <div className="sm:col-span-6">
            <div className="relative">
              <Search className="pointer-events-none absolute left-3 top-1/2 h-5 w-5 -translate-y-1/2 text-white/50" />
              <input
                value={search}
                onChange={(e) => setSearch(e.target.value)}
                placeholder={lang === "ar" ? "ابحث عن المنتجات" : "Search products"}
                className="w-full rounded-2xl border border-white/15 bg-black/60 py-3 pl-11 pr-4 text-sm text-white placeholder:text-white/40 focus:border-white/30 focus:ring-2 focus:ring-red-500/60"
              />
            </div>
          </div>
          <div className="sm:col-span-3">
            <div className="relative">
              <ArrowUpDown className="pointer-events-none absolute right-3 top-1/2 h-4 w-4 -translate-y-1/2 text-white/50" />
              <select
                value={sort}
                onChange={(e) => setSort(e.target.value)}
                className="w-full appearance-none rounded-2xl border border-white/15 bg-black/60 px-3 py-3 text-sm focus:border-white/30 focus:ring-2 focus:ring-red-500/60"
              >
                <option value="newest">Newest</option>
                <option value="price-asc">Price: Low → High</option>
                <option value="price-desc">Price: High → Low</option>
                <option value="name">Name A→Z</option>
              </select>
            </div>
          </div>
          <div className="sm:col-span-3">
            <button
              onClick={() => setPanelOpen(true)}
              className="inline-flex w-full items-center justify-center gap-2 rounded-2xl border border-white/15 bg-white/5 px-3 py-3 text-sm text-white transition hover:border-white/25 hover:bg-white/10"
            >
              <SlidersHorizontal className="h-4 w-4" /> More filters
            </button>
          </div>
        </div>

        {/* Category chips */}
        <div className="mb-6 flex flex-wrap gap-2">
          {categories.map(({ key, label }) => {
            const active = activeCats.includes(key);
            return (
              <motion.button
                key={key}
                onClick={() => toggleCatByKey(key)}
                whileTap={{ scale: 0.96 }}
                className={`relative inline-flex items-center gap-2 rounded-full border px-3 py-1.5 text-xs backdrop-blur transition ${active ? "border-red-500/40 bg-red-600/30 text-white" : "border-white/10 bg-white/5 text-white/80 hover:border-white/20 hover:bg-white/10"
                  }`}
              >
                <span className={`h-2 w-2 rounded-full ${active ? "bg-red-500" : "bg-white/40"}`} />
                {label}
              </motion.button>
            );
          })}
          {categories.length === 0 && <span className="text-sm text-white/60">No categories</span>}
        </div>

        {/* Loading, Grid, Empty states follow unchanged... */}
        {loading && (
          <ul className="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
            {Array.from({ length: 8 }).map((_, i) => (
              <li key={i} className="overflow-hidden rounded-2xl border border-white/10 bg-white/5">
                <div className="relative aspect-[4/3] w-full overflow-hidden">
                  <div className="h-full w-full animate-pulse bg-gradient-to-r from-white/10 via-white/20 to-white/10" />
                </div>
                <div className="space-y-3 p-4">
                  <div className="h-4 w-2/3 animate-pulse rounded bg-white/20" />
                  <div className="h-3 w-full animate-pulse rounded bg-white/10" />
                  <div className="h-3 w-5/6 animate-pulse rounded bg-white/10" />
                </div>
              </li>
            ))}
          </ul>
        )}

        {!loading && (
          <AnimatePresence initial={false}>
            <motion.ul
              layout
              className="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4"
            >
              {filtered.map((p) => (
                <motion.li
                  key={p.id}
                  layout
                  initial={{ opacity: 0, y: 12 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -12 }}
                  transition={{ duration: 0.35 }}
                  className="group relative flex flex-col overflow-hidden rounded-2xl border border-white/10 bg-white/5 shadow-lg backdrop-blur transition hover:border-white/20 hover:shadow-[0_0_60px_-10px_rgba(239,68,68,0.35)]"
                >
                  <div className="relative aspect-[4/3] w-full overflow-hidden">
                    <img src={p.image} alt={p.name} className="h-full w-full object-cover transition-transform duration-700 group-hover:scale-105" />
                    <span className="absolute left-3 top-3 rounded-full bg-red-600/90 px-3 py-1 text-xs font-semibold">{p.category}</span>
                  </div>
                  <div className="flex flex-1 flex-col justify-between p-4">
                    <div>
                      <h3 className="text-base font-bold leading-snug">{p.name}</h3>
                      <p className="mt-1 line-clamp-2 text-sm text-white/70">{p.description}</p>
                    </div>
                    <div className="mt-4 flex items-end justify-between">
                      <div className="text-lg font-bold">${p.priceEach.toFixed(2)}</div>
                      <a href={`/products/${p.id}`} className="rounded-xl bg-red-600 px-3 py-2 text-sm font-semibold text-white shadow-lg shadow-red-600/30 transition hover:bg-red-500">View</a>
                    </div>
                  </div>
                </motion.li>
              ))}
            </motion.ul>
          </AnimatePresence>
        )}

        {!loading && !error && filtered.length === 0 && (
          <div className="py-24 text-center text-white/70">No products match your filters.</div>
        )}

      </div>
    </section>
  );
}


